// Generated by gencpp from file wpb_home_behaviors/Coord.msg
// DO NOT EDIT!


#ifndef WPB_HOME_BEHAVIORS_MESSAGE_COORD_H
#define WPB_HOME_BEHAVIORS_MESSAGE_COORD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wpb_home_behaviors
{
template <class ContainerAllocator>
struct Coord_
{
  typedef Coord_<ContainerAllocator> Type;

  Coord_()
    : name()
    , x()
    , y()
    , z()
    , probability()  {
    }
  Coord_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , probability(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _name_type;
  _name_type name;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_type;
  _x_type x;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_type;
  _y_type y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _z_type;
  _z_type z;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _probability_type;
  _probability_type probability;





  typedef boost::shared_ptr< ::wpb_home_behaviors::Coord_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wpb_home_behaviors::Coord_<ContainerAllocator> const> ConstPtr;

}; // struct Coord_

typedef ::wpb_home_behaviors::Coord_<std::allocator<void> > Coord;

typedef boost::shared_ptr< ::wpb_home_behaviors::Coord > CoordPtr;
typedef boost::shared_ptr< ::wpb_home_behaviors::Coord const> CoordConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wpb_home_behaviors::Coord_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wpb_home_behaviors::Coord_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wpb_home_behaviors::Coord_<ContainerAllocator1> & lhs, const ::wpb_home_behaviors::Coord_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.probability == rhs.probability;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wpb_home_behaviors::Coord_<ContainerAllocator1> & lhs, const ::wpb_home_behaviors::Coord_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wpb_home_behaviors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpb_home_behaviors::Coord_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wpb_home_behaviors::Coord_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpb_home_behaviors::Coord_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4c6bf06051abcb9913c14ef2b4e56f0";
  }

  static const char* value(const ::wpb_home_behaviors::Coord_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4c6bf06051abcb9ULL;
  static const uint64_t static_value2 = 0x913c14ef2b4e56f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wpb_home_behaviors/Coord";
  }

  static const char* value(const ::wpb_home_behaviors::Coord_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name\n"
"float64[] x\n"
"float64[] y\n"
"float64[] z\n"
"float64[] probability\n"
;
  }

  static const char* value(const ::wpb_home_behaviors::Coord_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.probability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Coord_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wpb_home_behaviors::Coord_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    if (v.name.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.name[i]);
    }
    if (v.name.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x: ";
    if (v.x.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.x[i]);
    }
    if (v.x.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y: ";
    if (v.y.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.y[i]);
    }
    if (v.y.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "z: ";
    if (v.z.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.z[i]);
    }
    if (v.z.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "probability: ";
    if (v.probability.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.probability.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.probability[i]);
    }
    if (v.probability.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // WPB_HOME_BEHAVIORS_MESSAGE_COORD_H
